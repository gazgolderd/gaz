from aiogram import Router, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from ..models import TelegramUser, Chapter, Gram
from .. import kb, text
from ..states import SendState

router = Router()


@router.message(Command("start"))
async def start_command(msg: Message, state: FSMContext, bot: Bot, command: CommandObject):
    user, created = await sync_to_async(TelegramUser.objects.get_or_create)(user_id=msg.from_user.id)
    referred_by_id = command.args
    if user.referred_by is None and referred_by_id and created:
        user.referred_by = await sync_to_async(TelegramUser.objects.get)(id=referred_by_id)
        await bot.send_message(user.referred_by.user_id, text=text.referred_announce.format(user=user.username))

    user.first_name = msg.from_user.first_name
    user.last_name = msg.from_user.last_name
    user.username = msg.from_user.username
    user.save()
    print("USER IN START", user.user_id, user.username)
    is_subscribed = await bot.get_chat_member(chat_id="@BestChangeKgz", user_id=msg.from_user.id)
    if is_subscribed.status in ['member', 'administrator', 'creator']:
        await msg.answer("–ë–æ—Ç –≥–æ—Ç–æ–≤–∏—Ç—Å—è, –ø—Ä–∏—Ç–µ–≥–Ω–∏—Ç–µ —Ä–µ–º–Ω–∏!", reply_markup=kb.menu)
    else:
        await msg.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=kb.not_subscribed)


@router.message(Command("admin007"))
async def admin_panel(msg: Message, state: FSMContext, bot: Bot):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    chapters = await sync_to_async(Chapter.objects.all)()
    response_text = "‚ûñ‚ûñ‚ûñ*–ö–û–ú–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*‚ûñ‚ûñ‚ûñ\n\n"
    for i in chapters:
        response_text += f"‚ö´Ô∏è *({i.id}) | {i.title}* \n"
        grams = await sync_to_async(Gram.objects.filter)(chapter=i)
        for i in grams:
            response_text += f"„Ä∞Ô∏è„Ä∞Ô∏è*ID*: ({i.id}) | –≤–µ—Å {i.gram} GR = ${i.usd}\n"
    response_text += "\n‚ö†Ô∏è –ß—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delchapter *ID* —Ä–∞–∑–¥–µ–ª–∞\n"
    response_text += "‚ö†Ô∏è –ß—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å –≥—Ä–∞–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delgram *ID* —Ä–∞–∑–¥–µ–ª–∞\n\n"
    response_text += "üëÅ‚Äçüó® –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ /send\n"

    print("USER IN ADMIN007", user.user_id, user.username)
    if user.is_admin:
        await msg.answer(response_text, reply_markup=kb.admin_panel)
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")


@router.message(Command("send"))
async def send_command(msg: Message, state: FSMContext):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if user.is_admin:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await state.set_state(SendState.awaiting_text)
    else:
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")


@router.message(Command("delchapter"))
async def delete_chapter(msg: Message, command: CommandObject):
    args = command.args
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if args and user.is_admin or args and user.is_super_admin:
        chapter = await sync_to_async(Chapter.objects.get)(id=args)
        chapter.delete()
        await msg.answer(f"–†–∞–∑–¥–µ–ª {chapter.title} —É–¥–∞–ª—ë–Ω")
    if not args and user.is_admin or not args and user.is_super_admin:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–∑–¥–µ–ª–∞!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /delchapter 5")


@router.message(Command("delgram"))
async def delete_gram(msg: Message, command: CommandObject):
    args = command.args
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if args and user.is_admin or args and user.is_super_admin:
        gram = await sync_to_async(Gram.objects.get)(id=args)
        gram.delete()
        await msg.answer(f"–ì—Ä–∞–º {gram.gram}, –æ—Ç–Ω–æ—Å—è—â–∏–π –∫ {gram.chapter.title} —É–¥–∞–ª—ë–Ω")
    if not args and user.is_admin or not args and user.is_super_admin:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä–∞–º–∞!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /delgram 5")
