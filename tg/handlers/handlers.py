from aiogram import Router, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from ..models import TelegramUser, Chapter, Gram, Product
from .. import kb, text
from ..states import SendState
from django.utils import timezone
from datetime import datetime, timedelta
router = Router()


@router.message(Command("start"))
async def start_command(msg: Message, state: FSMContext, bot: Bot, command: CommandObject):
    user, created = await sync_to_async(TelegramUser.objects.get_or_create)(user_id=msg.from_user.id)
    referred_by_id = command.args
    if user.referred_by is None and referred_by_id:
        user.referred_by = await sync_to_async(TelegramUser.objects.get)(id=referred_by_id)
        await bot.send_message(user.referred_by.user_id, text=text.referred_announce.format(user=user.username))

    user.first_name = msg.from_user.first_name
    user.last_name = msg.from_user.last_name
    user.username = msg.from_user.username
    user.save()
    print("USER IN START", user.user_id, user.username)
    await msg.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚òÄÔ∏è", reply_markup=kb.menu)
    # is_subscribed = await bot.get_chat_member(chat_id="@GAZGOLDER_TEST", user_id=msg.from_user.id)
    # if is_subscribed.status in ['member', 'administrator', 'creator']:
    #     await msg.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", reply_markup=kb.menu)
    # else:
    #     await msg.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=kb.not_subscribed)


@router.message(Command("admin007"))
async def admin_panel(msg: Message, state: FSMContext, bot: Bot):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    chapters = await sync_to_async(Chapter.objects.all)()
    response_text = "‚ûñ‚ûñ*–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*‚ûñ‚ûñ\n\n"
    for i in chapters:
        perv = i.pervomaysky.count()
        okt = i.oktyabrsky.count()
        leni = i.leninsky.count()
        sverd = i.sverdlovsky.count()
        total = perv + okt + leni + sverd
        response_text += f"‚ö´Ô∏è *({i.id}) | {i.title}*\n({total} –≤ –ø—Ä–æ–¥–∞–∂–µ)\n"
        grams = await sync_to_async(Gram.objects.filter)(chapter=i)
        for i in grams:
            response_text += f"„Ä∞Ô∏è„Ä∞Ô∏è*ID*: ({i.id}) | –≤–µ—Å {i.gram} GR = ${i.usd}\n"
    response_text += "\n‚ö†Ô∏è –ß—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delchapter *ID* —Ä–∞–∑–¥–µ–ª–∞\n"
    response_text += "‚ö†Ô∏è –ß—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å –≥—Ä–∞–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /delgram *ID* —Ä–∞–∑–¥–µ–ª–∞\n\n"
    response_text += "üëÅ‚Äçüó® –†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ /send\n"
    response_text += "üëÅ‚Äçüó® –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ /showstats *–¥–Ω–µ–π*\n"
    response_text += "üëÅ‚Äçüó® –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞ /cour *—é–∑–µ—Ä–Ω–µ–π–º –∫—É—Ä—å–µ—Ä–∞ –±–µ–∑ @*\n"

    print("USER IN ADMIN007", user.user_id, user.username)
    if user.is_admin:
        await msg.answer(response_text, reply_markup=kb.admin_panel)
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")


@router.message(Command("send"))
async def send_command(msg: Message, state: FSMContext):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if user.is_admin:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await state.set_state(SendState.awaiting_text)
    else:
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")


@router.message(Command("delchapter"))
async def delete_chapter(msg: Message, command: CommandObject):
    args = command.args
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if args and user.is_admin or args and user.is_super_admin:
        chapter = await sync_to_async(Chapter.objects.get)(id=args)
        chapter.delete()
        await msg.answer(f"–†–∞–∑–¥–µ–ª {chapter.title} —É–¥–∞–ª—ë–Ω")
    if not args and user.is_admin or not args and user.is_super_admin:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞–∑–¥–µ–ª–∞!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /delchapter 5")


@router.message(Command("delgram"))
async def delete_gram(msg: Message, command: CommandObject):
    args = command.args
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if args and user.is_admin or args and user.is_super_admin:
        gram = await sync_to_async(Gram.objects.get)(id=args)
        gram.delete()
        await msg.answer(f"–ì—Ä–∞–º {gram.gram}, –æ—Ç–Ω–æ—Å—è—â–∏–π –∫ {gram.chapter.title} —É–¥–∞–ª—ë–Ω")
    if not args and user.is_admin or not args and user.is_super_admin:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä–∞–º–∞!\n–ù–∞–ø—Ä–∏–º–µ—Ä: /delgram 5")


@router.message(Command("showstats"))
async  def show_statistic(msg: Message, command: CommandObject):
    args = command.args
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if args and user.is_admin or args and user.is_super_admin:
        try:
            days_ago = int(args)
        except ValueError:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π (–ø–µ—Ä–∏–æ–¥)\n–ù–∞–ø—Ä–∏–º–µ—Ä /showstats 4")
            return
        three_days_ago = datetime.now() - timedelta(days=int(args))
        sold_products = await sync_to_async(Product.objects.filter)(
            sold=True,
            created_at__gte=three_days_ago
        )
        all_sum = 0
        text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} –¥–Ω–µ–π:\n\n".format(days_ago)
        for stats in sold_products:
            text += f"ID –ø—Ä–æ–¥—É–∫—Ç–∞: {stats.id}\n"
            text += f"–ü—Ä–æ–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {stats.user.username if stats.user.username else stats.user.user_id}\n"
            text += f"–†–∞–∑–¥–µ–ª: {stats.gram.chapter.title}\n"
            text += f"–ì—Ä–∞–º–º: {stats.gram.gram}\n"
            text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {stats.gram.usd}\n"
            text += "-" * 20 + "\n"
            all_sum += stats.gram.usd
        text += f"\n\n–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ {all_sum} –∑–∞ {days_ago} –¥–Ω–µ–π"
        await msg.answer(text)


@router.message(Command("c"))
async def courier(msg: Message):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if user.is_courier:
        await msg.answer("*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:*\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n",
                         reply_markup=kb.add_product_cour)


@router.message(Command("cour"))
async def add_courier(msg: Message, command: CommandObject):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if user.is_admin:
        args = command.args
        cour = await sync_to_async(TelegramUser.objects.get)(username=args)
        if cour.is_courier:
            cour.is_courier = False
            cour.save()
            await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —É–¥–∞–ª–µ–Ω –∏–∑ –∫—É—Ä—å–µ—Ä–æ–≤")
        elif not cour.is_courier:
            cour.is_courier = True
            cour.save()
            await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—å–µ—Ä—ã")


@router.message(Command("delproduct"))
async def del_product_admin(msg: Message, command: CommandObject):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if user.is_admin:
        args = command.args
        product = await sync_to_async(Product.objects.get)(id=args)
        product.delete()
        await msg.answer(f"({product.id}) `{product.text}`\n–£–¥–∞–ª–µ–Ω")


@router.message(Command("showproduct"))
async def del_product_admin(msg: Message, command: CommandObject):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=msg.from_user.id)
    if user.is_admin:
        args = command.args
        product = await sync_to_async(Product.objects.get)(id=args)
        await msg.answer(f"({product.id}) {product.text}\n"
                         f"{product.gram.chapter.title} {product.gram.gram}–≥—Ä ${product.gram.usd}\n"
                         f"{'–ö—É–ø–ª–µ–Ω@'+product.user.username + '' if product.user else '–ù–µ –∫—É–ø–ª–µ–Ω'}\n"
                         f"–í—ã–ª–æ–∂–∏–ª –∫—É—Ä—å–µ—Ä: {product.courier.username if product.courier.username else product.courier.user_id}", parse_mode=None)
